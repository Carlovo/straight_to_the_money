{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Straight to the Money \ud83d\udcb0 Minimalistic yet all-inclusive Python project template Stop wasting time in analysis paralysis over Python tooling choices \ud83d\udcb8 Pick the defaults \ud83d\udcb1 Go straight to the money \ud83d\udcb9 Usage Prerequisite: uv (Installing uv should also provide you with uvx. Give their docs a look-over before continuing if you want to get a better understanding of what is going on under the hood in the steps below.) Setup Initialize with uvx cruft create https://github.com/Carlovo/straight_to_the_money and fill in your project details. Validate the setup with uv run python -c \"import straight_to_the_money; print(straight_to_the_money.hello())\" (replace straight_to_the_money with your project name/slug). Optionally, pull in any dependencies with uv add some_lib_you_need Workflow Format: uvx ruff format Test: uv run python -m unittest Build: uv build Document: uvx mkdocs build Publish: uv publish Can it really be that simple? Well, eventually yes, but you will need to set up some connections and credentials still, of course. For a slightly more elaborate walkthrough on that, see the walkthrough . Still skeptical? See the about instead.","title":"Home"},{"location":"#straight-to-the-money","text":"Minimalistic yet all-inclusive Python project template Stop wasting time in analysis paralysis over Python tooling choices \ud83d\udcb8 Pick the defaults \ud83d\udcb1 Go straight to the money \ud83d\udcb9","title":"Straight to the Money \ud83d\udcb0"},{"location":"#usage","text":"Prerequisite: uv (Installing uv should also provide you with uvx. Give their docs a look-over before continuing if you want to get a better understanding of what is going on under the hood in the steps below.)","title":"Usage"},{"location":"#setup","text":"Initialize with uvx cruft create https://github.com/Carlovo/straight_to_the_money and fill in your project details. Validate the setup with uv run python -c \"import straight_to_the_money; print(straight_to_the_money.hello())\" (replace straight_to_the_money with your project name/slug). Optionally, pull in any dependencies with uv add some_lib_you_need","title":"Setup"},{"location":"#workflow","text":"Format: uvx ruff format Test: uv run python -m unittest Build: uv build Document: uvx mkdocs build Publish: uv publish Can it really be that simple? Well, eventually yes, but you will need to set up some connections and credentials still, of course. For a slightly more elaborate walkthrough on that, see the walkthrough . Still skeptical? See the about instead.","title":"Workflow"},{"location":"about/","text":"About When it comes to helping others with developing software, too many templates/guides/peoples focus on features, or even worse, tools. While this guided template extremely spotlights some tools, they are approached from a very different focus: needs. Every software development project has almost identical needs: version control dependency management linting testing compiling documentation publishing Of course, this list is not exhaustive. Software development these days also needs CI/CD, SBOM exports, ergonomic chairs etc. However, if anything from the list above is missing in your project, something is truly lacking. With this template I'm trying to fill in those needs as simple yet effective as possible. Some fanatics will look at this template and might say something like: \"Isn't pytest better than unittest?\" Or: \"Isn't tox also super useful?\" Well, are those extra dependencies that will only really be useful to people who already know how to add them to this template? Guess what, all three yes! Also, is anyone still interested in the academic differences between linting and formatting? No... until very weird errors start popping up and then you suddenly are... Are you likely to get to that point on your first 1,000 commits? No, and by that time, you can probably figure out how to stop that pesky formatter from undoing your intricacies. (If you feel like getting into the weeds early though, have at you .) Similarly silly discussions can be had about Hatch, MkDocs or Sphinx. I've had it with all these well-meaning 'developer advocates' forcing some tool on you at first chance, while no-one out there seems to be able to provide you a comprehensive end-to-end developer journey. Also, by keeping the template simple, it's open to extension with your own favorite tools without carrying the bloat from my choices. Anyway, despite my defensive stance, if you truly feel like you can make this template better without sacrificing its simplicity, by all means, make a pull request!","title":"About"},{"location":"about/#about","text":"When it comes to helping others with developing software, too many templates/guides/peoples focus on features, or even worse, tools. While this guided template extremely spotlights some tools, they are approached from a very different focus: needs. Every software development project has almost identical needs: version control dependency management linting testing compiling documentation publishing Of course, this list is not exhaustive. Software development these days also needs CI/CD, SBOM exports, ergonomic chairs etc. However, if anything from the list above is missing in your project, something is truly lacking. With this template I'm trying to fill in those needs as simple yet effective as possible. Some fanatics will look at this template and might say something like: \"Isn't pytest better than unittest?\" Or: \"Isn't tox also super useful?\" Well, are those extra dependencies that will only really be useful to people who already know how to add them to this template? Guess what, all three yes! Also, is anyone still interested in the academic differences between linting and formatting? No... until very weird errors start popping up and then you suddenly are... Are you likely to get to that point on your first 1,000 commits? No, and by that time, you can probably figure out how to stop that pesky formatter from undoing your intricacies. (If you feel like getting into the weeds early though, have at you .) Similarly silly discussions can be had about Hatch, MkDocs or Sphinx. I've had it with all these well-meaning 'developer advocates' forcing some tool on you at first chance, while no-one out there seems to be able to provide you a comprehensive end-to-end developer journey. Also, by keeping the template simple, it's open to extension with your own favorite tools without carrying the bloat from my choices. Anyway, despite my defensive stance, if you truly feel like you can make this template better without sacrificing its simplicity, by all means, make a pull request!","title":"About"},{"location":"walkthrough/","text":"Walkthrough Some things in usage might require a little more effort on the first run. Let's go over those in more detail. Initializing your project You will probably want to manage your project with some version control system and a remote, such as Git and GitHub. Personally, I like creating the repository in the remote and then cloning to local. That way everything is nicely set up for me. Except for the template, of course. cruft ( cookiecutter under its hood, actually) does not allow editing an existing directory by default for safety. Because we just cloned an empty repository, we can assume to be safe though. Clone your new repository somewhere. From the directory directly above it run: uvx cruft create -f https://github.com/Carlovo/straight_to_the_money (mind the -f ). cd to your project directory; git add all, commit and push; and you are ready to go. Other options would be: create the project with directory from the template with cruft, cd to it; git init, add all, commit, set the remote and push. create the project with directory from the template with cruft, copy the contents to a cloned repository; git add all, commit and push. Previewing and publishing your documentation So uvx mkdocs build nicely converts your documentation to a static website, now what? You will probably want to preview it before committing the source files, and when committed you will probably want to publish the build files somewhere on the web. MkDocs has two convenient commands build in for that: uvx mkdocs serve will serve a preview on local host http://127.0.0.1:8000/ (with watch files!). uvx mkdocs gh-deploy will upload your documentation to GitHub Pages. Both these commands have a lot of options and MkDocs has a lot more to offer in general (including automated publishing to other hosting parties). See for yourself. Publishing your Python package It's all done; time to make your work available to the masses! uv publish can be configured to go a lot of places, but let's just admit PyPI is the standard. For a fist time, it might be a good idea to use the PyPI Test instance though. Make an account there and get an api token. Then you can upload your work with: uv publish --publish-url https://test.pypi.org/legacy/ -t pypi-XXX (replace XXX with your specific credentials). You can test whether everything went OK by running: uv run --with \"https://test-files.pythonhosted.org/packages/XXX/XXX/XXX/straight_to_the_money-0.1.0-py3-none-any.whl\" --no-project -- python -c \"import straight_to_the_money; print(straight_to_the_money.hello())\" (replace XXX with your ids and straight_to_the_money to your project's name). If that works or if you just want to skip to the real deal, then make an account at PyPI and configure uv to publish to it the proper way. Bonus: tinkering within context My advice: run uv add --dev ptpython , then run uv run ptpython to bathe in luxury, and accept that you just pulled in couple of not strictly necessary dependencies. You could simply run uv run python and tinker away in your virtual env, but quality of life in ptpython's REPL is simply much better. Sadly, uvx ptpython doesn't work here. It makes sense, of course, because uv's whole point is env separation. Still, it would have been great in this particular case. Maybe, hopefully, I can update this part someday with an elegant hack to make it possible. The updated happy path workflow When you completed all the above successfully, pat yourself on the back for me. The real reward is of course a reliable way of developing your Python project. Considering the publishing and all, you may want to alter the workflow in this project's introduction to something like: Format: uvx ruff format Test: uv run python -m unittest Build: uv build Preview documentation: uvx mkdocs serve Publish package: uv publish Test package upload: uv run --with \"https://test-files.pythonhosted.org/packages/XXX/XXX/XXX/straight_to_the_money-0.1.0-py3-none-any.whl\" --no-project -- python -c \"import straight_to_the_money; Publish documentation: uvx mkdocs gh-deploy Or even better, create your own workflow that exactly caters to your project's needs. Happy coding \ud83e\udd17","title":"Walkthrough"},{"location":"walkthrough/#walkthrough","text":"Some things in usage might require a little more effort on the first run. Let's go over those in more detail.","title":"Walkthrough"},{"location":"walkthrough/#initializing-your-project","text":"You will probably want to manage your project with some version control system and a remote, such as Git and GitHub. Personally, I like creating the repository in the remote and then cloning to local. That way everything is nicely set up for me. Except for the template, of course. cruft ( cookiecutter under its hood, actually) does not allow editing an existing directory by default for safety. Because we just cloned an empty repository, we can assume to be safe though. Clone your new repository somewhere. From the directory directly above it run: uvx cruft create -f https://github.com/Carlovo/straight_to_the_money (mind the -f ). cd to your project directory; git add all, commit and push; and you are ready to go. Other options would be: create the project with directory from the template with cruft, cd to it; git init, add all, commit, set the remote and push. create the project with directory from the template with cruft, copy the contents to a cloned repository; git add all, commit and push.","title":"Initializing your project"},{"location":"walkthrough/#previewing-and-publishing-your-documentation","text":"So uvx mkdocs build nicely converts your documentation to a static website, now what? You will probably want to preview it before committing the source files, and when committed you will probably want to publish the build files somewhere on the web. MkDocs has two convenient commands build in for that: uvx mkdocs serve will serve a preview on local host http://127.0.0.1:8000/ (with watch files!). uvx mkdocs gh-deploy will upload your documentation to GitHub Pages. Both these commands have a lot of options and MkDocs has a lot more to offer in general (including automated publishing to other hosting parties). See for yourself.","title":"Previewing and publishing your documentation"},{"location":"walkthrough/#publishing-your-python-package","text":"It's all done; time to make your work available to the masses! uv publish can be configured to go a lot of places, but let's just admit PyPI is the standard. For a fist time, it might be a good idea to use the PyPI Test instance though. Make an account there and get an api token. Then you can upload your work with: uv publish --publish-url https://test.pypi.org/legacy/ -t pypi-XXX (replace XXX with your specific credentials). You can test whether everything went OK by running: uv run --with \"https://test-files.pythonhosted.org/packages/XXX/XXX/XXX/straight_to_the_money-0.1.0-py3-none-any.whl\" --no-project -- python -c \"import straight_to_the_money; print(straight_to_the_money.hello())\" (replace XXX with your ids and straight_to_the_money to your project's name). If that works or if you just want to skip to the real deal, then make an account at PyPI and configure uv to publish to it the proper way.","title":"Publishing your Python package"},{"location":"walkthrough/#bonus-tinkering-within-context","text":"My advice: run uv add --dev ptpython , then run uv run ptpython to bathe in luxury, and accept that you just pulled in couple of not strictly necessary dependencies. You could simply run uv run python and tinker away in your virtual env, but quality of life in ptpython's REPL is simply much better. Sadly, uvx ptpython doesn't work here. It makes sense, of course, because uv's whole point is env separation. Still, it would have been great in this particular case. Maybe, hopefully, I can update this part someday with an elegant hack to make it possible.","title":"Bonus: tinkering within context"},{"location":"walkthrough/#the-updated-happy-path-workflow","text":"When you completed all the above successfully, pat yourself on the back for me. The real reward is of course a reliable way of developing your Python project. Considering the publishing and all, you may want to alter the workflow in this project's introduction to something like: Format: uvx ruff format Test: uv run python -m unittest Build: uv build Preview documentation: uvx mkdocs serve Publish package: uv publish Test package upload: uv run --with \"https://test-files.pythonhosted.org/packages/XXX/XXX/XXX/straight_to_the_money-0.1.0-py3-none-any.whl\" --no-project -- python -c \"import straight_to_the_money; Publish documentation: uvx mkdocs gh-deploy Or even better, create your own workflow that exactly caters to your project's needs. Happy coding \ud83e\udd17","title":"The updated happy path workflow"}]}